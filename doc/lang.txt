###XE Language grammar

<program> ::= <glob_decl>  <main>
<glob_decl> ::= <global> <glob_decl> | eps

<global> ::= "global" "variable" <var__> <endl__>
<main> ::= "main" <block> <endl__>

<block> ::= "begin" <endl__> <statement> <block_rest> "end"
<block_rest> ::= <statement> <block_rest> | eps

<statement> ::= <block> | <expression> | <while> | <if> | <do> | <read> | <write> | <increment> | <decrement> | <assert> | eps

<expression> ::= <aggregator> <expr_> <endl__>

<while> ::= <aggregator> "while" <expr_> <block> <endl__>

<if> ::= <aggregator> "if" <expr_> <block> <endl__>

<do> ::= <aggregator> "do" <expr_> "times" <block> <endl__>

<read> ::= <aggregator> "read" "into" <var__> <endl__>

<write> ::= <aggregator> "write" <expr_> <endl__>

<assert> ::= <aggregator> "assert" <expr_> <endl__>

<increment> ::= <aggregator> "increment" <var__> <amount_> <endl__>

<decrement> ::= <aggregator> "decrement" <var__> <amount_> <endl__>


<aggregator> ::= <aggregator__> | eps

<amount_> ::= "by" <expr_> | eps

<endl__> - newline
<var__> - user defined variable
<aggregator__> - aggregator number and symbol (eg. &1)

<expr_> ::= ....

<call_> ::= "call" "(" <aggregator__> <call_target_> ")"
<call_target_> ::= "->" <var__> | eps
